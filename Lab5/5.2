import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.datasets import load_digits
from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras.optimizers import (Adam)
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

def prepareModel(X, y, class_num, learning_rate = 0.00001):
    model = createModel(X, class_num, learning_rate)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)
    model.fit(X_train, y_train, batch_size=32, epochs=500, validation_data=(X_test, y_test))

    return model

def resolveOutput(model):
    history = model.history.history
    floss_train = history['loss']
    floss_test = history['val_loss']
    acc_train = history['accuracy']
    acc_test = history['val_accuracy']
    fig, ax = plt.subplots(1, 2, figsize=(20, 10))
    epochs = np.arange(0, 500)

    ax[0].plot(epochs, floss_train, label='floss_train')
    ax[0].plot(epochs, floss_test, label='floss_test')
    ax[0].set_title("Funkcja start")
    ax[0].legend()
    ax[1].set_title("DokLadnosc")
    ax[1].plot(epochs, acc_train, label='acc_train')
    ax[1].plot(epochs, acc_test, label='acc_test')
    ax[1].legend()
    plt.show()

def createModel(X, class_num, learning_rate = 0.00001):
    model = Sequential()

    model.add(Dense(64, input_shape=(X.shape[1],), activation='relu'))
    model.add(Dense(64, activation='relu'))
    model.add(Dense(64, activation='relu'))

    model.add(Dense(class_num, activation='softmax'))

    model.compile(optimizer=Adam(learning_rate), loss="categorical_crossentropy", metrics='accuracy')
    model.summary()

    return model

data = load_digits()
X = data.data
y = data. target

y = pd.Categorical(y)
y = pd.get_dummies (y).values
class_num = y.shape[1]

model = prepareModel(X, y, class_num)
resolveOutput(model)
